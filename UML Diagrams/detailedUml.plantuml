@startuml

    class Actions {
        -decision: JSONObject
        -parameters: JSONObject
        -track: Tracker
        -coords: Coordinates
        -data: Data
        +fly(): String
        +changeDirection(direction: String): String
        +echo(direction: String): String
        +scan(): String
        +stop(): String
    }

    class GridSearch {
        -action: Actions
        -direction: Direction
        -data: Data
        -changeDir: int
        -south: int
        -north: int
        -count: int
        -left: boolean
        -hasChangedDir: boolean
        -rangeCheck: int

        +search(currentDirection: String, batteryLevel: int, startingBatteryLevel: int, checkDone: boolean): String
        +firstDirStep(): String
        +secondDirStep(): String
        +thirdDirStep(currentDirection: String): String
        +fourthDirStep(): String
        +firstTurn(left: boolean): String
        +secondTurn(currentDirection: String): String
        +fifthDirStep(currentDirection: String): String
        +sixthDirStep(currentDirection: String): String
        +turnSuccess(): String
        +beyondMapBounds(currentDirection: String, hasChangedDir: boolean): String
    }
    
    class Direction{
        -currentDirection: String

        +rightDirection(currentDirection: String): String
        +leftDirection(currentDirection: String): String
    }

    class InterTurn {
        -lastChecked: String
        -currentDirection: String
        -count: Integer
        -phase: Integer
        -goSouth: boolean
        -goNorth: boolean
        -data: Data
        -update: Coordinates

        +turn(): String
        +firstPhase(Actions, leftDir: String, rightDir: String): String
        +initTurning(Actions, String, String, Boolean, Boolean): String
        +goalDirection(String, String): void
    }


    class Radar{
        -response: JSONObject
        +Radar(JSONObject)
        +isEchoed(): boolean
        +isGround(): boolean

    }

    class PhotoScanner{
        -response: JSONObject
        -track: Tracker
        +PhotoScanner(JSONObject)
        +isScanned(): boolean
        +isCreek(): boolean
        +isSite(): boolean
    }

    class NavigationSystem {
        -island: FindIsland
        -algoRun: GridSearch
        -interlace: InterTurn
        -start: StartPoint
        -data: Data
        -coords: Coordinates
        -action: Actions
        -interTurn: boolean
        -hasChangedDir: boolean
        -onGround: boolean
        -currentDirection: String
        -groundFound: boolean
        -range: int
        -checkDone: boolean

        +run(batteryLevel: int, startingBatteryLevel: int): String
    }


    class DecisionBoard{
        -data: Data
        -rangeCheck: int
        -onGround: boolean
        -reachGround: boolean
        -newDirection: String
        -lastChecked: String
        -range: int
        -currentDirection: String

        +makeDecision(JSONObject): void
    }

    class Tracker{
        -x_coords: Map<String, Integer>
        -y_coords: Map<String, Integer>
        -emergency: int[]
        -creek_counter: int
        -coords: Coordinates
        -minDistance: double
        -closestCreek: String
        -ESite: String

        +POI(type: String, id: String): void
        +getNumCreeks(): int
        +getEmergencySite(): String
        +CurrentClosest(): String
        +getClosetCreekCoords(): String
    }

    class Coordinates{
        -x: int
        -y: int 
        -grid: int = 3.0

        +flyLocation(currentDirection: String): void
        +turnLocation(beforeTurn: String, currentDirection: String): void
        +x_coords(): int
        +y_coords(): int
    }

    interface SearchIsland{
        +search(currentDirection: String, batteryLevel: int, startingBatteryLevel: int, checkDone: boolean): String
    }

    SearchIsland --|> GridSearch
    GridSearch --> Actions
    GridSearch --> Direction
    GridSearch --> Data
    GridSearch --> InterTurn
    InterTurn --> Data
    InterTurn --> Coordinates
    Radar --> JSONObject
    PhotoScanner --> JSONObject
    PhotoScanner --> Tracker
    NavigationSystem --> FindIsland
    NavigationSystem --> GridSearch
    NavigationSystem --> InterTurn
    NavigationSystem --> StartPoint
    NavigationSystem --> Data
    NavigationSystem --> Coordinates
    NavigationSystem --> Actions
    NavigationSystem --> DecisionBoard
    DecisionBoard --> Data
    DecisionBoard --> JSONObject
    DecisionBoard ..> Radar
    DecisionBoard ..> PhotoScanner
    Tracker --> Coordinates


@enduml
