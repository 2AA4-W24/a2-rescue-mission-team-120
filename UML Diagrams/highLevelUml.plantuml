@startuml "Hello world"
    class Actions {
        - decision: JSONObject
        - parameters: JSONObject
        + fly(): String
        + changeDirection(direction: String): String
        + echo(direction: String): String
        + scan(): String
        + stop(): String
    }

class Data {
    + last: String
    + signal: int
    + fly: int
    + scanned: int
    + current: String
    + stage: int
    + count: int
    + changeDir: int
    + newDir: String
    + north: int
    + south: int
    + turn: boolean
    + ground: boolean
    + reached: boolean
    + goNorth: boolean
    + goSouth: boolean
    + checkDone: boolean
    + top: boolean
    + range_x_right: int
    + range_x_left: int
    + range_y_below: int
    + range_y_above: int
    + range: int
    + isStartingLeft: boolean
    + hasChangedDir: boolean
    + inPos: boolean
    + counting: int
    + beforeTurn: String
    + rangeChecker: int
    + groundLocated: boolean
}

class Explorer {
    - batteryLevel: Integer
    - startingBatteryLevel: Integer
    - count: Integer
    - rangeCheck: Integer
    - x: int
    - y: int
    + initialize(String): void
    + takeDecision(): String
    + acknowledgeResults(String): void
    + deliverFinalReport(): String
}


class Coordinates {
        - x: int = 0
        - y: int = 0
        - grid: int = 3
        + flyLocation(currentDirection: String): void
        + turnLocation(beforeTurn: String, currentDirection: String): void
    }

class Direction {
    + right(currDir: String): String
    + left(currDir: String): String
}

    class FindIsland {
        - fly: Integer
        - signal: Integer
        - scanned: Integer
        - lastChecked: String
        - currentDirection: String
        - newDirection: String
        - count: Integer
        - notInPos: Boolean
        - beforeTurn: String
        - groundFound: Boolean
        - onGround: Boolean

        + finder(): String
        + checkGround(task: Actions, rightDir: String, leftDir: String): String
        + getInPos(task: Actions, rightDir: String, leftDir: String): String
    }

class GridSearch {
        - changeDir: int
        - south: int
        - north: int
        - count: int
        - left: boolean
        - hasChangedDir: boolean
        - rangeCheck: int
        - checkDone: boolean
        - currentDirection: String

        + search(batteryLevel: int, startingBatteryLevel: int): String
        + firstDirStep(): String
        + secondDirStep(): String
        + thirdDirStep(currentDirection: String): String
        + fourthDirStep(): String
        + firstTurn(left: boolean): String
        + secondTurn(currentDirection: String): String
        + fifthDirStep(currentDirection: String): String
        + sixthDirStep(currentDirection: String): String
        + turnSuccess(): String
        + beyondMapBounds(currentDirection: String, hasChangedDir: boolean): String
    }

class InterTurn {
    - fly: Integer
    - signal: Integer
    - scanned: Integer
    - lastChecked: String
    - currentDirection: String
    - count: Integer
    - onGround: boolean
    - reachGround: boolean
    - goSouth: boolean
    - goNorth: boolean
    - range: Integer
    - groundFound: boolean

    + turn(): String
}

interface MissionType {
    + run(batteryLevel: int, startingBatteryLevel: int): String
}

class NavigationSystem {
    - interTurn: boolean
    - hasChangedDir: boolean
    - onGround: boolean
    - currentDirection: String
    - groundFound: boolean
    - range: int
    - checkDone: boolean

    + run(batteryLevel: int, startingBatteryLevel: int): String
}


class PhotoScanner {
    - response: JSONObject
    - track: tracker

    + PhotoScanner(response: JSONObject)
    + isScanned(): boolean
    + isCreek(): boolean
    + isSite(): boolean
    + verifyBiome(): boolean
}

class Radar {
    - response: JSONObject
    
    + Radar(response: JSONObject)
    + isEchoed(): boolean
    + isGround(): boolean
    }

interface SearchIsland {
    + search(batteryLevel: int, startingBatteryLevel: int): String
}

class StartPoint {
    - x_size: int
    - y_size: int
    - range: int
    - range_x_right: int
    - range_x_left: int
    - range_y_below: int
    - range_y_above: int
    + fourCorners(range: int, groundFound: boolean): String
    + topLeft(range: int, groundFound: boolean): String
    + topRight(range: int, groundFound: boolean): String
    + botRight(range: int, groundFound: boolean): String
    + botLeft(range: int, groundFound: boolean): String
    + inwards(range_x_left: int, range_x_right: int, range_y_above: int, range_y_below: int): String
}

    
Explorer--> Coordinates
Explorer-->Direction
Explorer-->PhotoScanner
Explorer-->Radar
Explorer-->Tracker
Actions-->Coordinates
Actions-->Tracker
Actions-->Data

Tracker -- PhotoScanner
@enduml