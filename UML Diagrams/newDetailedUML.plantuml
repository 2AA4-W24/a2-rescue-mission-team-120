@startuml
    interface SearchIsland {
        + search(String currentDirection, int batteryLevel, int startingBatteryLevel, boolean checkDone): String
    }

    class NavigationSystem {
        -island: FindIsland
        -algoRun: GridSearch
        -interlace: InterTurn
        -start: StartPoint
        -data: Data
        -coords: Coordinates
        -action: Actions
        -interTurn: boolean
        -hasChangedDir: boolean
        -onGround: boolean
        -currentDirection: String
        -groundFound: boolean
        -range: int
        -checkDone: boolean

        +run(batteryLevel: int, startingBatteryLevel: int): String
    }

    class Actions {
        -decision: JSONObject
        -parameters: JSONObject
        -track: Tracker
        -coords: Coordinates
        -data: Data
        +fly(): String
        +changeDirection(direction: String): String
        +echo(direction: String): String
        +scan(): String
        +stop(): String
    }

    class Direction{
        -currentDirection: String

        +rightDirection(currentDirection: String): String
        +leftDirection(currentDirection: String): String
    }

    class DecisionBoard{
        -data: Data
        -rangeCheck: int
        -onGround: boolean
        -reachGround: boolean
        -newDirection: String
        -lastChecked: String
        -range: int
        -currentDirection: String

        +makeDecision(JSONObject): void
    }

    class Radar{
        -response: JSONObject
        +Radar(JSONObject)
        +isEchoed(): boolean
        +isGround(): boolean
    }

    class PhotoScanner{
        -response: JSONObject
        -track: Tracker
        +PhotoScanner(JSONObject)
        +isScanned(): boolean
        +isCreek(): boolean
        +isSite(): boolean
    }


    class Data {
        + getChangeDirAlgo(): int
        + getCountAlgo(): int
        + getSouthAlgo(): int
        + getNorthAlgo(): int
        + getIsStartingLeft(): boolean
        + getHasChangedDir(): boolean
        + getRangeCheck(): int
        + getCurrDirection(): String
        + setChangeDirAlgo(int changeDirAlgo): void
        + setCountAlgo(countAlgo: int): void
        + setSouthAlgo(southAlgo: int): void
        + setNorthAlgo(northAlgo: int): void
        + setIsStartingLeft(isStartingLeft: boolean): void
        + setHasChangedDir(hasChangedDir:boolean ): void
        + setRangeCheck(rangeCheck: int): void
        + setBeforeTurnDir(beforeTurnDir: String): void
        + setInterTurn(interTurn: boolean): void
        + setOnGround(onGround: boolean): void
        + setPhase(phase: int): void
        + setLastDirection(lastDirection: String): void
    }

    class GridSearch {
        - action: Actions
        - direction: Direction
        - data: Data
        - changeDir: int
        - south: int
        - north: int
        - count: int
        - left: boolean
        - hasChangedDir: boolean
        - rangeCheck: int

        + search(currentDirection: String, batteryLevel: int, startingBatteryLevel: int, checkDone: boolean): String
        + firstDirStep(): String
        + secondDirStep(): String
        + thirdDirStep(currentDirection: String): String
        + fourthDirStep(): String
        + firstTurn(boolean left): String
        + secondTurn(currentDirection: String): String
        + fifthDirStep(currentDirection: String): String
        + sixthDirStep(currentDirection: String): String
        + turnSuccess(): String
        + beyondMapBounds(String currentDirection, boolean hasChangedDir): String
    }

    class InterTurn {
        -lastChecked: String
        -currentDirection: String
        -count: Integer
        -phase: Integer
        -goSouth: boolean
        -goNorth: boolean
        -data: Data
        -update: Coordinates

        +turn(): String
        +firstPhase(Actions, leftDir: String, rightDir: String): String
        +initTurning(Actions, String, String, Boolean, Boolean): String
        +goalDirection(String, String): void
    }




    NavigationSystem --> GridSearch
    NavigationSystem --> InterTurn 

    GridSearch <-->  DecisionBoard
    InterTurn <-->  DecisionBoard

    GridSearch --> SearchIsland


    Direction --> GridSearch
    Direction --> InterTurn

    DecisionBoard ..> Radar
    DecisionBoard ..> PhotoScanner

    Actions --> InterTurn
    Actions --> GridSearch
    Data ..> NavigationSystem
    Data ..> InterTurn
    Data ..> GridSearch
    Data ..> DecisionBoard


@enduml
